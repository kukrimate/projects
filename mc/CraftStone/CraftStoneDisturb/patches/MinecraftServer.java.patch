--- D:\CRAFTSTONE\DiffMakerPrivate\source\orig\net\minecraft\server\MinecraftServer.java	2014-11-28 15:11:00.000000000 +0100
+++ D:\CRAFTSTONE\DiffMakerPrivate\source\new\net\minecraft\server\MinecraftServer.java	2014-12-04 19:39:33.094638500 +0100
@@ -1,22 +1,15 @@
 package net.minecraft.server;
 
-import com.google.common.base.Charsets;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Queues;
-import com.google.common.util.concurrent.Futures;
-import com.google.common.util.concurrent.ListenableFuture;
-import com.google.common.util.concurrent.ListenableFutureTask;
-import com.mojang.authlib.GameProfile;
-import com.mojang.authlib.GameProfileRepository;
-import com.mojang.authlib.minecraft.MinecraftSessionService;
-import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.base64.Base64;
+
 import java.awt.GraphicsEnvironment;
 import java.awt.image.BufferedImage;
 import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.Method;
 import java.net.Proxy;
 import java.security.KeyPair;
 import java.text.SimpleDateFormat;
@@ -26,14 +19,18 @@
 import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Queue;
 import java.util.Random;
 import java.util.UUID;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
+
 import javax.imageio.ImageIO;
+
 import net.minecraft.command.CommandBase;
+import net.minecraft.command.CommandHandler;
 import net.minecraft.command.CommandResultStats;
 import net.minecraft.command.ICommandManager;
 import net.minecraft.command.ICommandSender;
@@ -71,21 +68,60 @@
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.WorldType;
 import net.minecraft.world.chunk.storage.AnvilSaveConverter;
-import net.minecraft.world.demo.DemoWorldServer;
+import net.minecraft.world.chunk.storage.AnvilSaveHandler;
 import net.minecraft.world.storage.ISaveFormat;
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.WorldInfo;
+
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class MinecraftServer implements ICommandSender, Runnable, IThreadListener, IPlayerUsage {
+import com.craftstone.ArrayTools;
+import com.craftstone.PermissionManager;
+import com.craftstone.Util;
+import com.craftstone.plugin.CraftPluginManager;
+import com.craftstone.stone.Server;
+import com.craftstone.stone.entity.OfflinePlayer;
+import com.craftstone.stone.entity.Player;
+import com.craftstone.stone.event.EventHandler;
+import com.craftstone.stone.event.Listener;
+import com.craftstone.stone.event.server.RConCommandEvent;
+import com.craftstone.stone.plugin.BasePlugin;
+import com.craftstone.stone.plugin.PluginManager;
+import com.google.common.base.Charsets;
+import com.google.common.base.Optional;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Queues;
+import com.google.common.util.concurrent.Futures;
+import com.google.common.util.concurrent.ListenableFuture;
+import com.google.common.util.concurrent.ListenableFutureTask;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.GameProfileRepository;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 
+public abstract class MinecraftServer implements ICommandSender, Runnable, IThreadListener, IPlayerUsage, Server {
    private static final Logger logger = LogManager.getLogger();
-   public static final File USER_CACHE_FILE = new File("usercache.json");
+	
+   //CraftStone start
+   public static final File CONFIG_DIR = new File("config" + File.separator);
+   public static final File CONFIG_FILE = new File(CONFIG_DIR, "config.xml");
+   public static final File STONE_CONFIG_FILE = new File(CONFIG_DIR, "stone.xml");
+   public static final File EULA_FILE = new File(CONFIG_DIR, "eula.txt");
+   public static final File WORLDS_DIR = new File("worlds");
+   public static final File USER_CACHE_FILE = new File(CONFIG_DIR, "usercache.json");
+   public static final String LOG_PREFIX = "[CraftStone] ";
+   
+   protected int maxWorldSize;
+   protected boolean allowEnd = true;
+   private CraftPluginManager pluginManager;
+   public PermissionManager permissionManager;
+   //CraftStone end
    private static MinecraftServer mcServer;
    private final ISaveFormat anvilConverterForAnvilFile;
-   private final PlayerUsageSnooper usageSnooper = new PlayerUsageSnooper("server", this, getCurrentTimeMillis());
+   //private final PlayerUsageSnooper usageSnooper = new PlayerUsageSnooper("server", this, getCurrentTimeMillis()); //CraftStone removed mojang snooper
    private final File anvilFile;
    private final List playersOnline = Lists.newArrayList();
    private final ICommandManager commandManager;
@@ -95,7 +131,7 @@
    private final Random random = new Random();
    private String hostname;
    private int serverPort = -1;
-   public WorldServer[] worldServers;
+   public List<WorldServer> worldServers; //CraftStone changed type to ArrayList
    private ServerConfigurationManager serverConfigManager;
    private boolean serverRunning = true;
    private boolean serverStopped;
@@ -112,7 +148,7 @@
    private int buildLimit;
    private int maxPlayerIdleMinutes = 0;
    public final long[] tickTimeArray = new long[100];
-   public long[][] timeOfLastDimensionTick;
+   //public long[][] timeOfLastDimensionTick; //CraftStone removed unneeded array
    private KeyPair serverKeyPair;
    private String serverOwner;
    private String folderName;
@@ -136,24 +172,37 @@
    private long currentTime = getCurrentTimeMillis();
 
 
-   public MinecraftServer(File var1, Proxy var2, File var3) {
+   public MinecraftServer(File var1, Proxy var2) {
       this.serverProxy = var2;
       mcServer = this;
       this.anvilFile = var1;
       this.networkSystem = new NetworkSystem(this);
-      this.profileCache = new PlayerProfileCache(this, var3);
-      this.commandManager = this.createNewCommandManager();
+      this.profileCache = new PlayerProfileCache(this, USER_CACHE_FILE); //Changed to usercache file
+      //CraftStone start
       this.anvilConverterForAnvilFile = new AnvilSaveConverter(var1);
       this.authService = new YggdrasilAuthenticationService(var2, UUID.randomUUID().toString());
       this.sessionService = this.authService.createMinecraftSessionService();
       this.profileRepo = this.authService.createProfileRepository();
+      this.pluginManager = new CraftPluginManager(this);
+      this.pluginManager.enablePlugins();
+      this.permissionManager = new PermissionManager();
+      this.commandManager = this.createNewCommandManager();
+      
+      this.startServerThread();
+      //CraftStone end
+   }
+   
+   //CraftStone start
+   public boolean isRunning() {
+	return serverIsRunning;
    }
+   //CraftStone end
 
    protected ServerCommandManager createNewCommandManager() {
       return new ServerCommandManager();
    }
 
-   protected abstract boolean startServer();
+   protected abstract boolean startServer() throws IOException;
 
    protected void convertMapIfNeeded(String var1) {
       if(this.getActiveAnvilConverter().isOldMapFormat(var1)) {
@@ -184,72 +233,55 @@
    protected void loadAllWorlds(String var1, String var2, long var3, WorldType var5, String var6) {
       this.convertMapIfNeeded(var1);
       this.setUserMessage("menu.loadingLevel");
-      this.worldServers = new WorldServer[3];
-      this.timeOfLastDimensionTick = new long[this.worldServers.length][100];
-      ISaveHandler var7 = this.anvilConverterForAnvilFile.getSaveLoader(var1, true);
-      this.setResourcePackFromWorld(this.getFolderName(), var7);
-      WorldInfo var9 = var7.loadWorldInfo();
-      WorldSettings var8;
-      if(var9 == null) {
-         if(this.isDemo()) {
-            var8 = DemoWorldServer.demoWorldSettings;
-         } else {
-            var8 = new WorldSettings(var3, this.getGameType(), this.canStructuresSpawn(), this.isHardcore(), var5);
-            var8.setWorldName(var6);
-            if(this.enableBonusChest) {
-               var8.enableBonusChest();
-            }
-         }
-
-         var9 = new WorldInfo(var8, var2);
-      } else {
-         var9.setWorldName(var2);
-         var8 = new WorldSettings(var9);
+      this.worldServers = new ArrayList<WorldServer>();
+      
+      int worldCount = 3;
+      
+      for (int i = 0; i < worldCount; i++) {
+    	  int dimension = 0;
+    	  String worldName = var1;
+    	  
+    	  if (i == 1) {
+    		 dimension = -1;
+    	  } else if (i == 2) {
+    		  dimension = 1;
+    	  }
+    	  
+    	  worldName = dimension == -1 ? worldName + "_nether" : (dimension == 1 ? worldName + "_the_end"  : worldName);
+    	  
+    	  WorldSettings worldSettings = new WorldSettings(var3, this.getGameType(), this.canStructuresSpawn(), this.isHardcore(), var5);
+    	  worldSettings.setWorldName(worldName);
+    	  
+    	  ISaveHandler saveHandler = new AnvilSaveHandler(WORLDS_DIR, worldName, true);
+    	  WorldInfo worldInfo = saveHandler.loadWorldInfo();
+    	  if (worldInfo == null) {
+    		  worldInfo = new WorldInfo(worldSettings, worldName);
+    	  }
+    	  
+    	  WorldServer currentWorld = null;
+    		  
+    	  if (dimension == 0) {
+    		  currentWorld = (WorldServer) new WorldServer(this, saveHandler, worldInfo, dimension, this.theProfiler).init();
+    	  } else {
+    		  currentWorld = (WorldServer) new WorldServerMulti(this, saveHandler, dimension, worldServers.get(0), this.theProfiler).init();
+    	  }
+
+    	  currentWorld.initialize(worldSettings);
+    	  currentWorld.addWorldAccess(new WorldManager(this, currentWorld));
+    	  
+    	  worldServers.add(currentWorld);
       }
 
-      for(int var10 = 0; var10 < this.worldServers.length; ++var10) {
-         byte var11 = 0;
-         if(var10 == 1) {
-            var11 = -1;
-         }
-
-         if(var10 == 2) {
-            var11 = 1;
-         }
-
-         if(var10 == 0) {
-            if(this.isDemo()) {
-               this.worldServers[var10] = (WorldServer)(new DemoWorldServer(this, var7, var9, var11, this.theProfiler)).init();
-            } else {
-               this.worldServers[var10] = (WorldServer)(new WorldServer(this, var7, var9, var11, this.theProfiler)).init();
-            }
-
-            this.worldServers[var10].initialize(var8);
-         } else {
-            this.worldServers[var10] = (WorldServer)(new WorldServerMulti(this, var7, var11, this.worldServers[0], this.theProfiler)).init();
-         }
-
-         this.worldServers[var10].addWorldAccess(new WorldManager(this, this.worldServers[var10]));
-         if(!this.isSinglePlayer()) {
-            this.worldServers[var10].getWorldInfo().setGameType(this.getGameType());
-         }
-      }
-
-      this.serverConfigManager.setPlayerManager(this.worldServers);
+      this.serverConfigManager.setPlayerManager(this.worldServers.toArray(new WorldServer[this.worldServers.size()]));
       this.setDifficultyForAllWorlds(this.getDifficulty());
       this.initialWorldChunkLoad();
    }
 
    protected void initialWorldChunkLoad() {
-      boolean var1 = true;
-      boolean var2 = true;
-      boolean var3 = true;
-      boolean var4 = true;
-      int var5 = 0;
+	  int percentage = 0;
       this.setUserMessage("menu.generatingTerrain");
-      byte var6 = 0;
-      logger.info("Preparing start region for level " + var6);
-      WorldServer var7 = this.worldServers[var6];
+      logger.info("Preparing start region for level " + 0);
+      WorldServer var7 = this.worldServers.get(0);
       BlockPos var8 = var7.getSpawnPoint();
       long var9 = getCurrentTimeMillis();
 
@@ -257,11 +289,11 @@
          for(int var12 = -192; var12 <= 192 && this.isServerRunning(); var12 += 16) {
             long var13 = getCurrentTimeMillis();
             if(var13 - var9 > 1000L) {
-               this.outputPercentRemaining("Preparing spawn area", var5 * 100 / 625);
+               this.outputPercentRemaining("Preparing spawn area", percentage * 100 / 625);
                var9 = var13;
             }
 
-            ++var5;
+            ++percentage;
             var7.theChunkProviderServer.loadChunk(var8.getX() + var11 >> 4, var8.getZ() + var12 >> 4);
          }
       }
@@ -285,7 +317,7 @@
 
    public abstract boolean isHardcore();
 
-   public abstract int getOpPermissionLevel();
+   //public abstract int getOpPermissionLevel();
 
    protected void outputPercentRemaining(String var1, int var2) {
       this.currentTask = var1;
@@ -300,18 +332,15 @@
 
    protected void saveAllWorlds(boolean var1) {
       if(!this.worldIsBeingDeleted) {
-         WorldServer[] var2 = this.worldServers;
-         int var3 = var2.length;
 
-         for(int var4 = 0; var4 < var3; ++var4) {
-            WorldServer var5 = var2[var4];
-            if(var5 != null) {
+         for(WorldServer world : this.worldServers) {
+            if(world != null) {
                if(!var1) {
-                  logger.info("Saving chunks for level \'" + var5.getWorldInfo().getWorldName() + "\'/" + var5.provider.getDimensionName());
+                  logger.info("Saving chunks for level \'" + world.getWorldInfo().getWorldName() + "\'/" + world.provider.getDimensionName());
                }
 
                try {
-                  var5.saveAllChunks(true, (IProgressUpdate)null);
+            	   world.saveAllChunks(true, (IProgressUpdate)null);
                } catch (MinecraftException var7) {
                   logger.warn(var7.getMessage());
                }
@@ -323,6 +352,9 @@
 
    public void stopServer() {
       if(!this.worldIsBeingDeleted) {
+    	  //CraftStone
+    	  this.pluginManager.disablePlugins();
+    	  
          logger.info("Stopping server");
          if(this.getNetworkSystem() != null) {
             this.getNetworkSystem().terminateEndpoints();
@@ -338,15 +370,14 @@
             logger.info("Saving worlds");
             this.saveAllWorlds(false);
 
-            for(int var1 = 0; var1 < this.worldServers.length; ++var1) {
-               WorldServer var2 = this.worldServers[var1];
-               var2.flush();
+            for(WorldServer world : this.worldServers) {
+            	world.flush();
             }
          }
 
-         if(this.usageSnooper.isSnooperRunning()) {
+         /*if(this.usageSnooper.isSnooperRunning()) { //CraftStone
             this.usageSnooper.stopSnooper();
-         }
+         }*/
 
       }
    }
@@ -392,7 +423,7 @@
 
                var1 += var5;
                this.currentTime = var48;
-               if(this.worldServers[0].areAllPlayersAsleep()) {
+               if(this.worldServers.get(0).areAllPlayersAsleep()) { //TEMP
                   this.tick();
                   var1 = 0L;
                } else {
@@ -503,7 +534,7 @@
       this.theProfiler.startSection("tallying");
       this.tickTimeArray[this.tickCounter % 100] = System.nanoTime() - var1;
       this.theProfiler.endSection();
-      this.theProfiler.startSection("snooper");
+      /*this.theProfiler.startSection("snooper");
       if(!this.usageSnooper.isSnooperRunning() && this.tickCounter > 100) {
          this.usageSnooper.startSnooper();
       }
@@ -512,7 +543,7 @@
          this.usageSnooper.addMemoryStatsToSnooper();
       }
 
-      this.theProfiler.endSection();
+      this.theProfiler.endSection();*/ //CraftStone unneeded
       this.theProfiler.endSection();
    }
 
@@ -531,15 +562,13 @@
 
       this.theProfiler.endStartSection("levels");
 
-      int var11;
-      for(var11 = 0; var11 < this.worldServers.length; ++var11) {
-         long var2 = System.nanoTime();
-         if(var11 == 0 || this.getAllowNether()) {
-            WorldServer var4 = this.worldServers[var11];
-            this.theProfiler.startSection(var4.getWorldInfo().getWorldName());
+      for(WorldServer world : this.worldServers) {
+         //long var2 = System.nanoTime();
+         if(world.provider.getDimensionId() == 0 || this.getAllowNether()) {
+            this.theProfiler.startSection(world.getWorldInfo().getWorldName());
             if(this.tickCounter % 20 == 0) {
                this.theProfiler.startSection("timeSync");
-               this.serverConfigManager.sendPacketToAllPlayersInDimension(new S03PacketTimeUpdate(var4.getTotalWorldTime(), var4.getWorldTime(), var4.getGameRules().getGameRuleBooleanValue("doDaylightCycle")), var4.provider.getDimensionId());
+               this.serverConfigManager.sendPacketToAllPlayersInDimension(new S03PacketTimeUpdate(world.getTotalWorldTime(), world.getWorldTime(), world.getGameRules().getGameRuleBooleanValue("doDaylightCycle")), world.provider.getDimensionId());
                this.theProfiler.endSection();
             }
 
@@ -547,29 +576,29 @@
 
             CrashReport var6;
             try {
-               var4.tick();
+            	world.tick();
             } catch (Throwable var8) {
                var6 = CrashReport.makeCrashReport(var8, "Exception ticking world");
-               var4.addWorldInfoToCrashReport(var6);
+               world.addWorldInfoToCrashReport(var6);
                throw new ReportedException(var6);
             }
 
             try {
-               var4.updateEntities();
+            	world.updateEntities();
             } catch (Throwable var7) {
                var6 = CrashReport.makeCrashReport(var7, "Exception ticking world entities");
-               var4.addWorldInfoToCrashReport(var6);
+               world.addWorldInfoToCrashReport(var6);
                throw new ReportedException(var6);
             }
 
             this.theProfiler.endSection();
             this.theProfiler.startSection("tracker");
-            var4.getEntityTracker().updateTrackedEntities();
+            world.getEntityTracker().updateTrackedEntities();
             this.theProfiler.endSection();
             this.theProfiler.endSection();
          }
 
-         this.timeOfLastDimensionTick[var11][this.tickCounter % 100] = System.nanoTime() - var2;
+         //this.timeOfLastDimensionTick[var11][this.tickCounter % 100] = System.nanoTime() - var2;
       }
 
       this.theProfiler.endStartSection("connection");
@@ -578,7 +607,7 @@
       this.serverConfigManager.onTick();
       this.theProfiler.endStartSection("tickables");
 
-      for(var11 = 0; var11 < this.playersOnline.size(); ++var11) {
+      for(int var11 = 0; var11 < this.playersOnline.size(); ++var11) {
          ((IUpdatePlayerListBox)this.playersOnline.get(var11)).update();
       }
 
@@ -666,7 +695,6 @@
             var15.setGuiEnabled();
          }
 
-         var15.startServerThread();
          Runtime.getRuntime().addShutdownHook(new Thread("Server Shutdown Thread") {
             public void run() {
                var15.stopServer();
@@ -696,7 +724,13 @@
    }
 
    public WorldServer worldServerForDimension(int var1) {
-      return var1 == -1?this.worldServers[1]:(var1 == 1?this.worldServers[2]:this.worldServers[0]);
+	   if (var1 == 0) {
+		   return this.worldServers.get(0);
+	   } else if (var1 == -1) {
+		   return this.worldServers.get(1);
+	   } else {
+		   return this.worldServers.get(2);
+	   }
    }
 
    public String getHostname() {
@@ -735,10 +769,22 @@
       return "";
    }
 
-   public String handleRConCommand(String var1) {
-      RConConsoleSource.func_175570_h().resetLog();
-      this.commandManager.executeCommand(RConConsoleSource.func_175570_h(), var1);
-      return RConConsoleSource.func_175570_h().getLogContents();
+   public String handleRConCommand(String var1) { //CraftStone
+	  String[] command = var1.split(" ");
+	  String commandName = command[0];
+	  String[] arguments = new String[command.length - 1];
+	  if (command.length > 1)
+	  {
+		  arguments = CommandHandler.dropFirstString(command);
+	  }
+	  RConCommandEvent event = new RConCommandEvent(commandName, arguments);
+	  this.callEvent(event);
+	  if (!event.wasCanclled()) {
+	      RConConsoleSource.defaultRconCommandSender().resetLog();
+	      this.commandManager.executeCommand(RConConsoleSource.defaultRconCommandSender(), var1);
+	      return RConConsoleSource.defaultRconCommandSender().getLogContents();
+	  }
+	  return "Command execution cannceled by a plugin.";
    }
 
    public boolean isDebuggingEnabled() {
@@ -757,7 +803,7 @@
    }
 
    public String getServerModName() {
-      return "vanilla";
+      return "CraftStone";
    }
 
    public CrashReport addServerInfoToCrashReport(CrashReport var1) {
@@ -765,7 +811,6 @@
          public String func_179879_a() {
             return MinecraftServer.this.theProfiler.profilingEnabled?MinecraftServer.this.theProfiler.getNameOfLastSection():"N/A (disabled)";
          }
-         // $FF: synthetic method
          public Object call() {
             return this.func_179879_a();
          }
@@ -775,10 +820,6 @@
             public String call() {
                return MinecraftServer.this.serverConfigManager.getCurrentPlayerCount() + " / " + MinecraftServer.this.serverConfigManager.getMaxPlayers() + "; " + MinecraftServer.this.serverConfigManager.playerEntityList;
             }
-            // $FF: synthetic method
-            public Object call() {
-               return this.call();
-            }
          });
       }
 
@@ -838,7 +879,7 @@
       logger.info(var1.getUnformattedText());
    }
 
-   public boolean canCommandSenderUseCommand(int var1, String var2) {
+   public boolean canCommandSenderUseCommand(String permission) { //CraftStone
       return true;
    }
 
@@ -883,18 +924,17 @@
    }
 
    public void setDifficultyForAllWorlds(EnumDifficulty var1) {
-      for(int var2 = 0; var2 < this.worldServers.length; ++var2) {
-         WorldServer var3 = this.worldServers[var2];
-         if(var3 != null) {
-            if(var3.getWorldInfo().isHardcoreModeEnabled()) {
-               var3.getWorldInfo().setDifficulty(EnumDifficulty.HARD);
-               var3.setAllowedSpawnTypes(true, true);
+      for(WorldServer world : this.worldServers) {
+         if(world != null) {
+            if(world.getWorldInfo().isHardcoreModeEnabled()) {
+            	world.getWorldInfo().setDifficulty(EnumDifficulty.HARD);
+            	world.setAllowedSpawnTypes(true, true);
             } else if(this.isSinglePlayer()) {
-               var3.getWorldInfo().setDifficulty(var1);
-               var3.setAllowedSpawnTypes(var3.getDifficulty() != EnumDifficulty.PEACEFUL, true);
+            	world.getWorldInfo().setDifficulty(var1);
+            	world.setAllowedSpawnTypes(world.getDifficulty() != EnumDifficulty.PEACEFUL, true);
             } else {
-               var3.getWorldInfo().setDifficulty(var1);
-               var3.setAllowedSpawnTypes(this.allowSpawnMonsters(), this.canSpawnAnimals);
+            	world.getWorldInfo().setDifficulty(var1);
+            	world.setAllowedSpawnTypes(this.allowSpawnMonsters(), this.canSpawnAnimals);
             }
          }
       }
@@ -925,14 +965,13 @@
       this.worldIsBeingDeleted = true;
       this.getActiveAnvilConverter().flushCache();
 
-      for(int var1 = 0; var1 < this.worldServers.length; ++var1) {
-         WorldServer var2 = this.worldServers[var1];
-         if(var2 != null) {
-            var2.flush();
+      for(WorldServer world : this.worldServers) {
+         if(world != null) {
+        	 world.flush();
          }
+         
+         this.getActiveAnvilConverter().deleteWorldDirectory(world.getSaveHandler().getWorldDirectoryName());
       }
-
-      this.getActiveAnvilConverter().deleteWorldDirectory(this.worldServers[0].getSaveHandler().getWorldDirectoryName());
       this.initiateShutdown();
    }
 
@@ -964,18 +1003,17 @@
       var1.addClientStat("avg_tick_ms", Integer.valueOf((int)(MathHelper.average(this.tickTimeArray) * 1.0E-6D)));
       int var2 = 0;
       if(this.worldServers != null) {
-         for(int var3 = 0; var3 < this.worldServers.length; ++var3) {
-            if(this.worldServers[var3] != null) {
-               WorldServer var4 = this.worldServers[var3];
-               WorldInfo var5 = var4.getWorldInfo();
-               var1.addClientStat("world[" + var2 + "][dimension]", Integer.valueOf(var4.provider.getDimensionId()));
+         for(WorldServer world : this.worldServers) {
+            if(world != null) {
+               WorldInfo var5 = world.getWorldInfo();
+               var1.addClientStat("world[" + var2 + "][dimension]", Integer.valueOf(world.provider.getDimensionId()));
                var1.addClientStat("world[" + var2 + "][mode]", var5.getGameType());
-               var1.addClientStat("world[" + var2 + "][difficulty]", var4.getDifficulty());
+               var1.addClientStat("world[" + var2 + "][difficulty]", world.getDifficulty());
                var1.addClientStat("world[" + var2 + "][hardcore]", Boolean.valueOf(var5.isHardcoreModeEnabled()));
                var1.addClientStat("world[" + var2 + "][generator_name]", var5.getTerrainType().getWorldTypeName());
                var1.addClientStat("world[" + var2 + "][generator_version]", Integer.valueOf(var5.getTerrainType().getGeneratorVersion()));
                var1.addClientStat("world[" + var2 + "][height]", Integer.valueOf(this.buildLimit));
-               var1.addClientStat("world[" + var2 + "][chunks_loaded]", Integer.valueOf(var4.getChunkProvider().getLoadedChunkCount()));
+               var1.addClientStat("world[" + var2 + "][chunks_loaded]", Integer.valueOf(world.getChunkProvider().getLoadedChunkCount()));
                ++var2;
             }
          }
@@ -1068,8 +1106,8 @@
    }
 
    public void setGameType(WorldSettings.GameType var1) {
-      for(int var2 = 0; var2 < this.worldServers.length; ++var2) {
-         getServer().worldServers[var2].getWorldInfo().setGameType(var1);
+      for(WorldServer world : this.worldServers) {
+    	  world.getWorldInfo().setGameType(var1);
       }
 
    }
@@ -1092,7 +1130,7 @@
       this.startProfiling = true;
    }
 
-   public BlockPos getPosition() {
+   public BlockPos getVanillaPosition() {
       return BlockPos.ORIGIN;
    }
 
@@ -1101,7 +1139,7 @@
    }
 
    public World getEntityWorld() {
-      return this.worldServers[0];
+      return this.worldServers.get(0);
    }
 
    public Entity getCommandSenderEntity() {
@@ -1169,13 +1207,9 @@
    }
 
    public Entity getEntityFromUuid(UUID var1) {
-      WorldServer[] var2 = this.worldServers;
-      int var3 = var2.length;
-
-      for(int var4 = 0; var4 < var3; ++var4) {
-         WorldServer var5 = var2[var4];
-         if(var5 != null) {
-            Entity var6 = var5.getEntityFromUuid(var1);
+      for(WorldServer world : this.worldServers) {
+         if(world != null) {
+            Entity var6 = world.getEntityFromUuid(var1);
             if(var6 != null) {
                return var6;
             }
@@ -1186,13 +1220,13 @@
    }
 
    public boolean sendCommandFeedback() {
-      return getServer().worldServers[0].getGameRules().getGameRuleBooleanValue("sendCommandFeedback");
+      return this.worldServers.get(0).getGameRules().getGameRuleBooleanValue("sendCommandFeedback");
    }
 
    public void func_174794_a(CommandResultStats.Type var1, int var2) {}
 
-   public int getMaxWorldSize() {
-      return 29999984;
+   public int getMaxWorldSize() { //CraftStone
+      return this.maxWorldSize;
    }
 
    public ListenableFuture callFromMainThread(Callable var1) {
@@ -1233,5 +1267,128 @@
    public Thread getServerThread() {
       return this.serverThread;
    }
-
+   
+   @Override
+   public boolean isOnlineMode() {
+   	return this.onlineMode;
+   }
+
+   @Override
+   public void setMotd(String motd) {
+	   this.setMOTD(motd);
+   }
+
+   @Override
+   public int getCurrentOnlinePlayerCount() {
+   	return this.getConfigurationManager().getCurrentPlayerCount();
+   }
+
+   @Override
+   public void broadcastMessage(String message) {
+	   for (Object o : this.getConfigurationManager().playerEntityList) {
+		   EntityPlayerMP player = (EntityPlayerMP)o;
+		   player.addChatMessage(new ChatComponentText(message));
+	   }
+   }
+
+   @Override
+   public Logger getLogger() {
+   	return logger;
+   }
+
+   @Override
+   public File getServerDataFolder() {
+   	return this.anvilFile;
+   }
+
+   @Override
+   public List<Player> getOnlinePlayers() {
+   		List<Player> playerList = Lists.newArrayList();
+   		for (Object obj : this.getConfigurationManager().playerEntityList) {
+   			playerList.add((Player)obj);
+   		}
+   		return playerList;
+   }
+
+   @Override
+   public Optional<Player> getPlayerIfOnline(String name) {
+  		for (Object obj : this.getConfigurationManager().playerEntityList) {
+   			if (((Player)obj).getName().equals(name)) {
+   				return Optional.of((Player)obj);
+   			}
+   		}
+  		return Optional.absent();
+   }
+
+   @Override
+   public Optional<OfflinePlayer> getPlayerIfExists(String name) {
+   	return null;
+   }
+
+   @Override
+   public PluginManager getPluginManager() {
+   	return this.pluginManager;
+   }
+
+   @Override
+   public List<com.craftstone.stone.world.World> getWorlds() {
+	   List<com.craftstone.stone.world.World> worldList = Lists.newArrayList();
+   	   for (com.craftstone.stone.world.World world : this.worldServers) {
+   		   worldList.add(world);
+   	   }
+   	   return worldList;
+   }
+
+   @Override
+   public Optional<com.craftstone.stone.world.World> getWorld(String name) {
+   	   for (com.craftstone.stone.world.World world : this.worldServers) {
+   		   if (world.getWorldName().equals(name)) {
+   			   return Optional.of(world);
+   		   }
+   	   }
+   	   return Optional.absent();
+   }
+
+   @Override
+   public boolean isNetherAllowed() {
+   	return this.getAllowNether();
+   }
+
+   @Override
+   public boolean isEndAllowed() {
+   	  return allowEnd;
+   }
+
+   @Override
+   public void sendMessage(String message) {
+	   logger.info(message);
+   }
+   
+   @Override
+   public String getAPIVersion() {
+	   return "1.0";
+   }
+
+	public void callEvent(Object event) {
+		Map<BasePlugin, List<Listener>> map = this.pluginManager.getListenerMap();
+		Map<Listener, List<Method>> listeners = Maps.newHashMap();
+		
+		for (Map.Entry<BasePlugin, List<Listener>> entry : map.entrySet()) {
+			List<Listener> listenerList = entry.getValue();
+			for (Listener lis : listenerList) {
+				List<Method> methods = Util.filterMethodsForParam(event.getClass(), Util.filterMethods(EventHandler.class, ArrayTools.arrayToList(lis.getClass().getDeclaredMethods())));
+				if (methods.size() < 1) {
+					continue;
+				}
+				listeners.put(lis, methods);
+			}
+		}
+		for (Map.Entry<Listener, List<Method>> entry : listeners.entrySet()) {
+			Listener lis = entry.getKey();
+			List<Method> methods = entry.getValue();
+			for (Method method : methods) {
+				Util.invokeMethod(method, lis, event);
+			}
+		}
+	}
 }
